import dash
from dash import dcc, html, Input, Output
import yfinance as yf
import plotly.graph_objects as go
import cachetools.func  # For caching

# Initialize Dash app
app = dash.Dash(__name__)
app.title = "Interactive Stock Performance Dashboard"  # Updated application name
app.external_stylesheets = ['https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap']

# Cache for stock data
@cachetools.func.ttl_cache(maxsize=100, ttl=300)
def fetch_stock_data(ticker, start_date, end_date):
    """Fetch stock data from Yahoo Finance with caching."""
    data = yf.Ticker(ticker)
    hist = data.history(start=start_date, end=end_date)
    return hist, data.info

# App Layout
app.layout = html.Div(
    style={
        "font-family": "Roboto", 
        "background": "linear-gradient(135deg, #1e3c72, #2a5298)",  # Gradient background
        "min-height": "100vh", 
        "padding": "20px"
    },
    children=[
        html.Div([
            html.H1("ðŸ“Š Interactive Stock Performance Dashboard",  # Updated title
                    style={"text-align": "center", "color": "#ffffff", "margin-bottom": "20px", "font-weight": "700"}),
        ], style={"margin-bottom": "20px"}),

        html.Div([
            html.Div([
                html.Label("Stock Ticker:", style={"font-weight": "bold", "color": "#333"}),
                dcc.Input(
                    id="stock-ticker", type="text", value="AAPL", 
                    placeholder="Enter stock ticker",
                    style={"width": "100%", "padding": "10px", "border": "1px solid #ccc", "border-radius": "4px"}
                ),
            ], style={"margin-bottom": "10px"}),

            html.Div([
                html.Label("Comparison Index:", style={"font-weight": "bold", "color": "#333"}),
                dcc.Dropdown(
                    id="comparison-index",
                    options=[
                        # U.S. Market Indices
                        {"label": "United States - S&P 500 (^GSPC)", "value": "^GSPC"},
                        {"label": "United States - NASDAQ Composite (^IXIC)", "value": "^IXIC"},
                        {"label": "United States - Dow Jones Industrial Average (^DJI)", "value": "^DJI"},
                        {"label": "United States - Russell 2000 (^RUT)", "value": "^RUT"},
                        
                        # International Market Indices
                        {"label": "United Kingdom - FTSE 100 (^FTSE)", "value": "^FTSE"},
                        {"label": "Germany - DAX (^GDAXI)", "value": "^GDAXI"},
                        {"label": "Japan - Nikkei 225 (^N225)", "value": "^N225"},
                        {"label": "France - CAC 40 (^FCHI)", "value": "^FCHI"},
                        
                        # Latin/South American Market Indices
                        {"label": "Brazil - Bovespa Index (^BVSP)", "value": "^BVSP"},
                        {"label": "Mexico - IPC Index (^MXX)", "value": "^MXX"},
                        {"label": "Argentina - MERVAL Index (^MERV)", "value": "^MERV"},
                        {"label": "Chile - IPSA Index (^IPSA)", "value": "^IPSA"},
                        {"label": "Colombia - COLCAP Index (^COLCAP)", "value": "^COLCAP"}
                    ],
                    value="^GSPC",  # Default index
                    placeholder="Select a market index",
                    style={"width": "100%", "padding": "10px", "border-radius": "4px"}
                ),
            ], style={"margin-bottom": "10px"}),

            html.Div([
                html.Label("Start Date:", style={"font-weight": "bold", "color": "#333"}),
                dcc.Input(
                    id="start-date", type="text", value="2024-01-01", 
                    placeholder="YYYY-MM-DD",
                    style={"width": "100%", "padding": "10px", "border": "1px solid #ccc", "border-radius": "4px"}
                ),
            ], style={"margin-bottom": "10px"}),

            html.Div([
                html.Label("End Date:", style={"font-weight": "bold", "color": "#333"}),
                dcc.Input(
                    id="end-date", type="text", value="2025-01-01", 
                    placeholder="YYYY-MM-DD",
                    style={"width": "100%", "padding": "10px", "border": "1px solid #ccc", "border-radius": "4px"}
                ),
            ], style={"margin-bottom": "20px"}),

            html.Button("Update", id="update-button", 
                        style={"background-color": "#007BFF", "color": "#fff", "padding": "10px 20px", 
                               "border": "none", "border-radius": "4px", "cursor": "pointer"}),
        ], style={"background-color": "#e0e0e0", "padding": "20px", "border-radius": "8px", 
                  "box-shadow": "0 2px 4px rgba(0,0,0,0.2)", "margin-bottom": "20px"}),

        # Graphs Section
        html.Div([
            dcc.Graph(id="stock-price-chart"),
            dcc.Graph(id="comparison-chart"),
            dcc.Graph(id="financial-metrics-chart")
        ], style={"background-color": "#e0e0e0", "padding": "20px", "border-radius": "8px", 
                  "box-shadow": "0 2px 4px rgba(0,0,0,0.2)"})
    ]
)

# Callbacks
@app.callback(
    [Output("stock-price-chart", "figure"),
     Output("comparison-chart", "figure"),
     Output("financial-metrics-chart", "figure")],
    [Input("update-button", "n_clicks")],
    [Input("stock-ticker", "value"), Input("comparison-index", "value"),
     Input("start-date", "value"), Input("end-date", "value")]
)
def update_dashboard(n_clicks, stock_ticker, comparison_index, start_date, end_date):
    # Fetch data
    stock_data, stock_info = fetch_stock_data(stock_ticker, start_date, end_date)
    comparison_data, _ = fetch_stock_data(comparison_index, start_date, end_date)
    
    # Stock Price Chart
    fig_stock = go.Figure()
    fig_stock.add_trace(go.Scatter(x=stock_data.index, y=stock_data["Close"], name=f"{stock_ticker} Price"))
    fig_stock.update_layout(title=f"{stock_ticker} Stock Price", xaxis_title="Date", yaxis_title="Price (USD)")

    # Comparison Chart
    stock_returns = stock_data["Close"].pct_change().cumsum()
    comparison_returns = comparison_data["Close"].pct_change().cumsum()
    fig_comparison = go.Figure()
    fig_comparison.add_trace(go.Scatter(x=stock_data.index, y=stock_returns, name=f"{stock_ticker} Returns"))
    fig_comparison.add_trace(go.Scatter(x=comparison_data.index, y=comparison_returns, name=f"{comparison_index} Returns"))
    fig_comparison.update_layout(title="Performance Comparison", xaxis_title="Date", yaxis_title="Cumulative Returns")

    # Financial Metrics Chart
    metrics = {
        "P/E Ratio": stock_info.get("trailingPE", None),
        "P/B Ratio": stock_info.get("priceToBook", None),
        "EPS (USD)": stock_info.get("trailingEps", None)
    }
    metric_names = list(metrics.keys())
    metric_values = [val if val is not None else 0 for val in metrics.values()]
    
    fig_metrics = go.Figure(data=[
        go.Bar(x=metric_names, y=metric_values, text=[f"{v:.2f}" for v in metric_values], textposition="auto")
    ])
    fig_metrics.update_layout(title="Key Financial Metrics", xaxis_title="Metric", yaxis_title="Value")

    return fig_stock, fig_comparison, fig_metrics

if __name__ == "__main__":
    app.run_server(debug=True)
